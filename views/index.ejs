<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat da galera</title>

    <link 
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
        rel="stylesheet" 
        ntegrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" 
        crossorigin="anonymous"
    >
    <script 
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" 
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" 
        crossorigin="anonymous"
    ></script>

    <style>
        body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }
  
        #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 15%; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
        #sair { color: red; cursor: pointer; padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
        #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
        #input:focus { outline: none; }
        #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }
  
        #messages { list-style-type: none; padding: 0; margin-left: 15%; }
        #messages > li { padding: 0.5rem 1rem; }
        #messages > li:nth-child(odd) { background: #efefef; }
        .namep{
            margin:0;
            padding: 0.5rem 1rem;
            color: rgb(10, 10, 10);
            background-color: rgb(180, 180, 180);
            font-size: 20px;
        }
        .namep2{
            margin:0;
            padding: 0.5rem 1rem;
            color: rgb(0, 0, 0);
            background-color: rgb(255, 255, 255);
            font-size: 25px;
        }
        #usersOnline{
            position: fixed;
            width: 15%;
            height: 100%;
            backdrop-filter: blur(10px);
            background: rgba(0, 0, 0, 0.15);
            bottom: 0;
            left: 0;
        }
        .usersH1{
            text-align: center;
        }
    </style>
    <script>
        const { User } = require('../models/user');

        var username = localStorage.getItem('username')
        if(!username){
            localStorage.setItem('username', '')

            location.reload()
        }

        if(username == ''){
            location.assign('/login')
        }

        const user = User.findOne({ username });

        if(!user){
            localStorage.setItem('username', '')
        }
        location.assign('/')
    </script>
</head>
<body>
    <div id="usersOnline">
        <h1 class="usersH1" id="usersH1"></h1>
        <ul id="users"></ul>
        <a id="sair">logout</a>
    </div>
    <ul id="messages"></ul>
    <form id="form" action="">
      <input id="input" autocomplete="off" /><button>Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var name = localStorage.getItem('username');

        var socket = io();

        var messages = document.getElementById('messages');
        var usersUl = document.getElementById('users');
        var usersTitle = document.getElementById('usersH1');
        var form = document.getElementById('form');
        var input = document.getElementById('input');
        var sair = document.getElementById('sair');


        sair.onclick = function() {
            localStorage.setItem('username', '');

            location.reload()
        }


        form.addEventListener('submit', function(e) {
            e.preventDefault();
            if  (input.value) {
                socket.emit('chat message', {
                    username: name,
                    msgstring: input.value
                });
                input.value = '';
            }
        });

        socket.emit('userConnected', {username: name});
        socket.emit('disconnection', {username: name});

        socket.on('output-messages', data => {
            if (data.length) {
                data.forEach(message => {
                    appendUsers(message.username)
                    appendMessages(message.msgstring)
                    
                });
                appendAlertMessages1()
            }else{
                appendAlertMessages2()
            }
            window.scrollTo(0, document.body.scrollHeight);
        });

        /*socket.on('output-users', data => {
            console.log(data)
            if (data.length) {
                data.forEach(message => {
                    appendUsersTab(message.username)
                });
            };
        });*/

        socket.on("displayUsers", function(data){
            let county = Object.keys(data.users).length
            let usersValues = Object.values(data.users)

            usersTitle.textContent = 'Users (' + county + ')'; 
            //usersUl.textContent = '' + data.users + '';

            //usersUl.textContent =  Object.values(data.users);
            
            usersUl.textContent = ""

            usersValues.forEach(appendUsersTab)


        });

        socket.on('disconnection', function(data) {
            let county = Object.keys(data.users).length
            let usersValues = Object.values(data.users)

            usersTitle.textContent = ''; 

            usersTitle.textContent = 'Users (' + county + ')'; 

            usersUl.textContent = ""

            usersValues.forEach(appendUsersTab)

        });

        socket.on('chat message', function(obj) {
            let nameP = document.createElement('p');
            nameP.className = "namep"
            nameP.textContent = obj.username + ":";
            
            let item = document.createElement('li');
            item.textContent = obj.msgstring

            messages.appendChild(nameP);
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

        function appendUsersTab(item) {
            const html = item + '<br>'
            usersUl.innerHTML += html
        }

        function appendUsers(message) {
            const html = `<p class="namep">${message}:</p>`
            messages.innerHTML += html
        }
        

        function appendMessages(message) {
            const html = `<p style=" padding:0.5rem 1rem; ">${message}</p>`
            messages.innerHTML += html
        }

        function appendAlertMessages1() {
            const html = `<h3 class="namep">↑ Mensagens antigas ↑</h3>`
            messages.innerHTML += html
        }

        function appendAlertMessages2() {
            const html = `<h3 class="namep">↓ Seja o primeiro a mandar uma mensagem! ↓</h3>`
            messages.innerHTML += html
        }
    </script>
</body>
</html>